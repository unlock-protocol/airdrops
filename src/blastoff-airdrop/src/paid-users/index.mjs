import { request, gql } from 'graphql-request';

const points = {}



const addPoints = (address, p) => {
  if (!points[address]) {
    points[address] = 0
  }
  points[address] += p
}

// TODO: check `0x0991c02bae5f0368097a23d885f31f441ad65989`

const locks = {
  "0x010393dff25f4751072e71cf5babb53336657701": 137,
  "0x01703c979220de3e7662ab90a696843225d31383": 137,
  "0x054cfc31373b4dd3a3d1fc0f72c5a3026b117b57": 137,
  "0x0c46a03c1c079d010079a8c9577ee60c4869c4cc": 137,
  "0x0cc912ec2f6d0fec06d46569f2daace5f1f7faf7": 10,
  "0x0cf74f3947562bdcb09dcf8e07be3aba11c7b64e": 137,
  "0x124b97a2310144c742104808743355202fd63e23": 42161,
  "0x12d1afa87e40d8717359a71ceeded61bfc45cf63": 137,
  "0x13014412ab19dedcbab94f4d81e1733240234fd6": 137,
  "0x16772aeeb638a45810bce514f00a666ebe5e25a0": 137,
  "0x1756c6d0d80cbd4b82e85adae1468d0a60de81ee": 10,
  "0x187bcc5520a1beaafcd8bbfd30e9dd40da245058": 10,
  "0x1cd41d6d9d1880800799f675f0b01565eff35200": 137,
  "0x1dcd158388d50889af900506476ef5abda8e0091": 137,
  "0x1efbaf705ac7e8588148f06a369eb43935f1beb9": 10,
  "0x2186b16802d92a6a13681d0a1f17a23451b22497": 10,
  "0x238b522fa4d04bfe0b9b875e9ccea6d3f98d51d2": 8453,
  "0x25bf0b55d5fe2c994760544c222a7ff8fba60721": 137,
  "0x25ecd5f097a516351841eda2ad964fb3e559b58a": 137,
  "0x27c03235e07f581c8c3670a75e01bfc3282989a1": 10,
  "0x27fb25e111d2540b195a4a0c6e471a5e7e8cd6ec": 8453,
  "0x28271e70ae5dbe295eaf20430162e1cd3b0a3561": 137,
  "0x2f7143b5e930c464d29fd97396e0999f57662f8d": 137,
  "0x3886fb47824b8d30b239c0262ebf0eaf663f7f67": 137,
  "0x3b2aa4137664601f8b7549b1cd0f7b20def19260": 42161,
  "0x3f3954081cf4bb0a1361a03ad16ade1b1593af46": 137,
  "0x4119a55f4b384b44f2e79ef25bc69bec699fac85": 42161,
  "0x456cc03543d41eb1c9a7ca9fa86e9383b404f50d": 8453,
  "0x45accac0e5c953009cda713a3b722f87f2907f86": 10,
  "0x45ccabb6427b79f9655179fbabd0569d0f3d11ca": 137,
  "0x4850c262cd90f96cd4e6ac1d7dda5e0efdea62e7": 137,
  "0x491bce020a8b7d1e7d91c61a55e8f2538d11ce30": 137,
  "0x4d3b801824d645b854d828cc621cf06d92b535fc": 42161,
  "0x4d3e628ac6eeadaefa7ca0940ade518f598ddb73": 10,
  "0x4e0c80548e67a6e05464e540729222eb9812444d": 137,
  "0x4edff193c89be06c687fac6a2f29236d9b0449a4": 8453,
  "0x4fd7019eab30ff7347d215fe1510d05e6fd420a4": 137,
  "0x53faf6285c426920b7d103c5f4a40f7788e1f1fd": 10,
  "0x55b1b31d0e442c5167a88ccb2e800578e6828ea8": 137,
  "0x567aedb0b1472931429cd76b5bb0a5d08fb23c7c": 137,
  "0x573a6532146d755beffcf49c28237f2374d968b8": 10,
  "0x5b708cc6d44d0fef802a758fedaf6ca5912a0ba1": 42161,
  "0x5c108616a5A458F42f5201dFC379B4DcC961e236": 10,
  "0x5f4035572bc9209742d26e18e0d4601e400a5fde": 137,
  "0x60a280a0416a8719a027cdd23e398c322689f9c5": 10,
  "0x622e617fe917d040714dab2816410ed7cfbad8e1": 137,
  "0x637a45725dc681226c56cd02ce8b8dbb59fd8f00": 137,
  "0x66635571ce821e6e396cb274e265ddc047751670": 137,
  "0x66aff56e902b443bf55277482e5eae51e27773e3": 137,
  "0x6e5c9759c58642b587c1d3eb39cad2b18930927e": 137,
  "0x7092e5c4610cd6ab97fdda219ed00048f22e185c": 10,
  "0x70a5f59726a702d8fe6a7dfe0771c22948ffa102": 137,
  "0x73fc36ba5684655807f60a6437463cc527f50027": 10,
  "0x741f2a0e228fdc752b0ba12b811e40dff86f7252": 1,
  "0x74d0b49486480c55d552a4e4a3b7b33bf05ae509": 137,
  "0x786472b8e31e25fddee52e9e2f7813c3ded495da": 10,
  "0x7ddfb88112f5e3b37ca92e7b782ae47d2b008e11": 10,
  "0x7fda917b69044a6af1fecf50a829763c4c64fb80": 137,
  "0x82289a6b592b869173048439bd9fbd045573c414": 10,
  "0x83ddda82ca4235d67298664bb550cb18574ece8b": 137,
  "0x861be455458adbda144a874ea406e36f20c1fbd8": 137,
  "0x88f3336ed66892b65219e051fad689a4c6dfa06a": 137,
  "0x88f7f844bdeb0a6c02197f7ef85280ab7c2b0f3e": 10,
  "0x89c98813b9b52697cf7571b35fb74608b98e1683": 100,
  "0x8dcd353c28a0686a57161f63340b91fca9db5a10": 137,
  "0x8fb09430c4d31130eb3a906c9244dd20f14c1f67": 137,
  "0x92354976fab8fe283fc209f393f91a4f231758a8": 42161,
  "0x946740ca894d63de3a3ee217086ec8e8483c4c15": 42161,
  "0x9d160ca6ed46ac5a6a5b2ba68cd34433ceed7f77": 137,
  "0x9eb1dc77ac01b823f94c25ea054650930a3b7050": 10,
  "0xa4e5700cfa1994f040f05e6f9489bd3c1123c533": 137,
  "0xa963514f6246515a06e40d437e62fa6e636bcfeb": 42161,
  "0xab6842300dbb21d22e643948f0355acf39b1511c": 8453,
  "0xac859626b4cecc72277f7c2361ea613e902eb51f": 137,
  "0xac96698ee547de03ebde4dc55dfd17101cf39ba5": 137,
  "0xaca008d387481842f2928662d936c4738fddd7bd": 137,
  "0xafe362e326e76caa18fbe975f79e79b55e30755b": 137,
  "0xb6e111bf4796e89bc17f8a4aa763ef1f707f2fb5": 137,
  "0xb7a11c046e6e18577033838d8eb2432c8c587320": 10,
  "0xbb08337ab49f923e7e031b7ae17eefb768f5be48": 42161,
  "0xbbd9fa3a05d97f96450fb475f645371c54b7a408": 137,
  "0xbeb70c4be903f18f3f425e9beeaaa249d8d3c3da": 137,
  "0xbf0aa922afdd7044037901f4f96b4585ddd09ce7": 100,
  "0xbf49ca4bf09d4b720fe5fcaecce0fe5d5b1becb9": 137,
  "0xc3f52b8705d7df3a8e8426b71ff2850ffdb30c81": 137,
  "0xc5fce0b4bb3af3bb006ccdc0d628662b3298f877": 137,
  "0xc9933b35d118e1746b9ceb68f748bd26e06f1ee2": 42161,
  "0xcadbbf07d81d8148e406e9a38de473d0e689c328": 137,
  "0xcaf214a3a1a3d77b250e9e969b3e861cf649d48c": 137,
  "0xd0193d0595be3388b7d3784168413fc534e42fcc": 8453,
  "0xd20b86ee506f4b45234857d5dd5f58b100feba73": 10,
  "0xd59723c30d56fa84defabebe85594cee6aef25ca": 137,
  "0xd5ad8b93cf31197b1b74f26ec32b9bea54658531": 137,
  "0xe41d784991067704186984ed06d8e04bd5ad0fc2": 137,
  "0xe6b98741d620fed61f7091a211023379f34739e3": 137,
  "0xe8b5c935764742cda69eb71b7f01cf1c4e70b567": 8453,
  "0xea4d8c95b5a17456302d770d0f543a3c03a4de22": 42161,
  "0xeb7bf56d1e71222e0d1bd494cc9ae398df6fda14": 137,
  "0xebbee903b47104a6027aef0b57d927a95361dac3": 10,
  "0xf0443169335de6d66220434454b3b6204d08450a": 137,
  "0xf159a25cb3c8dc1e421af4d2c0f8dd48783c0cd7": 42161,
  "0xf23e7634089116210b6a29324783f7daba8740b2": 10,
  "0xf460d9f647e09b32375c04bd4168c15c90eed238": 137,
  "0xf518c3f3537c3cf0cded70d20918dd903886890d": 10,
  "0xf87f4ba899f3840c54f330b472bc4906697aceda": 137,
  "0xfc0116392b4464cdb6ab28acdcdc1e81601f4580": 137,
  "0xfd9c31bc94eda4f3a28d227d25f18b3482544366": 137
}

const processLock = async (lockAddress, network) => {
  const byLock = {}

  // Get data from the subgraph.
  // We need to get all key holders, and all lock managers.
  const endpoint = `https://subgraph.unlock-protocol.com/${network}`

  const query = `{
    lock(id: "${lockAddress}") {
      address
      name
      lockManagers
      keys(first: 1000) {
        owner
      }
    }
  }`;

  const data = await request(endpoint, query);
  data.lock.lockManagers.forEach((manager) => {
    addPoints(manager, 10)
  })
  data.lock.keys.forEach((key) => {
    if (!byLock[key.owner]) {
      byLock[key.owner] = true
      addPoints(key.owner, 1)
    }
  })
  if (data.lock.keys.length > 1000) {
    console.log("More than 1000 keys")
    console.log(lockAddress, network)
  }
}


const run = async () => {
  console.log("Running")
  for (let i in locks) {
    await processLock(i.toLowerCase(), locks[i])
  }
  console.log(points)
}

run()